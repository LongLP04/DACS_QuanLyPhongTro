@model IEnumerable<DACS_QuanLyPhongTro.Models.ToaNha>
@{
    ViewData["Title"] = "Danh sách Tòa Nhà";
    Layout = "~/Areas/ChuTroArea/Views/Shared/layoutAdminLTE.cshtml";

    var totalBuildings = Model?.Count() ?? 0;
    var totalFloors = Model?.Sum(t => t.TongSoTang) ?? 0;
    var totalRooms = Model?.Sum(t => (t.PhongTros?.Count) ?? 0) ?? 0;
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
    </div>
}

<div class="content-header px-2 px-md-3 pt-1 pb-0">
    <div class="d-flex align-items-center justify-content-between flex-wrap gap-2">
        <h2 class="h4 mb-0">@ViewData["Title"]</h2>
        <div class="d-flex align-items-center gap-2">
            <div class="input-group input-group-sm me-2" style="width:260px;">
                <div class="input-group-prepend">
                    <span class="input-group-text bg-white"><i class="fas fa-search"></i></span>
                </div>
                <input id="searchBox" type="text" class="form-control" placeholder="Tìm theo tên hoặc địa chỉ">
            </div>
            <select id="sortSelect" class="form-select form-select-sm" style="width:180px;">
                <option value="name">Sắp xếp: Tên (A→Z)</option>
                <option value="floors">Số tầng (Cao→Thấp)</option>
            </select>
            <a asp-action="Create" class="btn btn-primary btn-sm"><i class="fas fa-plus me-1"></i> Thêm tòa nhà</a>
        </div>
    </div>
</div>

<!-- Summary widgets -->
<div class="row px-2 px-md-3 mt-3 g-3">
    <div class="col-12 col-sm-6 col-lg-3">
        <div class="small-box bg-gradient-primary mb-0">
            <div class="inner">
                <h3>@totalBuildings</h3>
                <p>Tổng tòa nhà</p>
            </div>
            <div class="icon"><i class="fas fa-city"></i></div>
        </div>
    </div>
    <div class="col-12 col-sm-6 col-lg-3">
        <div class="small-box bg-gradient-info mb-0">
            <div class="inner">
                <h3>@totalFloors</h3>
                <p>Tổng số tầng</p>
            </div>
            <div class="icon"><i class="fas fa-layer-group"></i></div>
        </div>
    </div>
    <div class="col-12 col-sm-6 col-lg-3">
        <div class="small-box bg-gradient-success mb-0">
            <div class="inner">
                <h3>@totalRooms</h3>
                <p>Tổng phòng (ước tính)</p>
            </div>
            <div class="icon"><i class="fas fa-door-open"></i></div>
        </div>
    </div>
    <div class="col-12 col-sm-6 col-lg-3">
        <div class="small-box bg-gradient-warning mb-0">
            <div class="inner">
                <h3>@DateTime.Now:MM/yyyy</h3>
                <p>Tháng hiện tại</p>
            </div>
            <div class="icon"><i class="fas fa-calendar-alt"></i></div>
        </div>
    </div>
    <div class="col-12"><hr class="my-2"></div>
</div>

<!-- Card grid -->
<div class="row px-2 px-md-3 g-3" id="buildingsGrid">
    @foreach (var t in Model)
    {
        var rooms = t.PhongTros?.Count ?? 0;
        <div class="col-12 col-sm-6 col-lg-4 building-item" data-name="@t.TenToaNha" data-address="@t.DiaChi" data-floors="@t.TongSoTang">
            <div class="card shadow-sm border-0 h-100 building-card">
                <div class="card-body">
                    <div class="d-flex align-items-start justify-content-between">
                        <div>
                            <h5 class="card-title mb-1 fw-bold">@t.TenToaNha</h5>
                            <div class="text-muted small"><i class="fas fa-map-marker-alt me-1"></i>@t.DiaChi</div>
                        </div>
                        <div class="avatar bg-gradient-primary text-white rounded-circle d-flex align-items-center justify-content-center" style="width:40px;height:40px;">
                            <i class="fas fa-building"></i>
                        </div>
                    </div>
                    <div class="mt-3 d-flex gap-2 flex-wrap">
                        <span class="badge bg-primary-subtle text-primary border border-primary">Tầng: <strong>@t.TongSoTang</strong></span>
                        <span class="badge bg-success-subtle text-success border border-success">Phòng: <strong>@rooms</strong></span>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(t.MoTa))
                    {
                        <p class="mt-3 text-secondary small mb-0">@t.MoTa</p>
                    }
                </div>
                <div class="card-footer bg-transparent border-0 pt-0 pb-3 px-3">
                    <div class="d-flex gap-2">
                        <a asp-action="Edit" asp-route-id="@t.MaToaNha" class="btn btn-outline-primary btn-sm"><i class="fas fa-edit me-1"></i>Sửa</a>
                        <a asp-action="Delete" asp-route-id="@t.MaToaNha" class="btn btn-outline-danger btn-sm"><i class="fas fa-trash me-1"></i>Xóa</a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .small-box .icon{right:10px; top: 6px;}
    .bg-primary-subtle{ background: #e8f0ff; }
    .bg-success-subtle{ background: #e8f7ef; }
    .building-card{ transition: transform .15s ease, box-shadow .15s ease; }
    .building-card:hover{ transform: translateY(-4px); box-shadow: 0 8px 24px rgba(0,0,0,.08); }
    .avatar{ background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%); }
</style>

@section Scripts {
    <script>
        (function(){
            const grid = document.getElementById('buildingsGrid');
            const searchBox = document.getElementById('searchBox');
            const sortSelect = document.getElementById('sortSelect');

            function filter() {
                const q = (searchBox?.value || '').trim().toLowerCase();
                const items = grid.querySelectorAll('.building-item');
                items.forEach(el => {
                    const name = (el.dataset.name || '').toLowerCase();
                    const addr = (el.dataset.address || '').toLowerCase();
                    el.style.display = (!q || name.includes(q) || addr.includes(q)) ? '' : 'none';
                });
            }

            function sort() {
                const items = Array.from(grid.querySelectorAll('.building-item'));
                const type = sortSelect.value;
                items.sort((a,b)=>{
                    if(type==='floors'){
                        return (parseInt(b.dataset.floors||'0') - parseInt(a.dataset.floors||'0'));
                    }
                    // default name asc
                    return (a.dataset.name||'').localeCompare(b.dataset.name||'');
                });
                items.forEach(i=>grid.appendChild(i));
            }

            searchBox?.addEventListener('input', filter);
            sortSelect?.addEventListener('change', sort);
            sort();
        })();
    </script>
}
