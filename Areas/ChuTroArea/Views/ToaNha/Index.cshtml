@model IEnumerable<DACS_QuanLyPhongTro.Models.ToaNha>
@{
    ViewData["Title"] = "Danh sách Tòa Nhà";
    Layout = "~/Areas/ChuTroArea/Views/Shared/layoutAdminLTE.cshtml";

    var totalBuildings = Model?.Count() ?? 0;
    var totalFloors = Model?.Sum(t => t.TongSoTang) ?? 0;
    var totalRooms = Model?.Sum(t => (t.PhongTros?.Count) ?? 0) ?? 0;
    var totalEmptyRooms = Model?.Sum(t => t.PhongTros?.Count(p => p.TrangThai == "Trống") ?? 0) ?? 0;
    var totalRentedRooms = Model?.Sum(t => t.PhongTros?.Count(p => p.TrangThai == "Đã Thuê") ?? 0) ?? 0;
}

@Html.AntiForgeryToken()

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
    </div>
}

<div class="content-header px-2 px-md-3 pt-1 pb-0">
    <div class="d-flex align-items-center justify-content-between flex-wrap gap-2">
        <h2 class="h4 mb-0">@ViewData["Title"]</h2>
        <div class="d-flex align-items-center gap-2">
            <div class="input-group input-group-sm me-2" style="width:260px;">
                <div class="input-group-prepend">
                    <span class="input-group-text bg-white"><i class="fas fa-search"></i></span>
                </div>
                <input id="searchBox" type="text" class="form-control" placeholder="Tìm theo tên hoặc địa chỉ">
            </div>
            <select id="sortSelect" class="form-select form-select-sm" style="width:180px;">
                <option value="name">Sắp xếp: Tên (A→Z)</option>
                <option value="floors">Số tầng (Cao→Thấp)</option>
            </select>
            <a href="#" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#passwordConfirmModal"><i class="fas fa-plus me-1"></i> Thêm tòa nhà</a>
        </div>
    </div>
</div>

<!-- Summary widgets -->
<div class="row px-2 px-md-3 mt-3 g-3">
    <div class="col-12 col-sm-6 col-lg-3">
        <div class="small-box bg-gradient-primary mb-0">
            <div class="inner">
                <h3>@totalBuildings</h3>
                <p>Tổng tòa nhà</p>
            </div>
            <div class="icon"><i class="fas fa-city"></i></div>
        </div>
    </div>
    <div class="col-12 col-sm-6 col-lg-3">
        <div class="small-box bg-gradient-info mb-0">
            <div class="inner">
                <h3>@totalEmptyRooms</h3>
                <p>Tổng phòng trống</p>
            </div>
            <div class="icon"><i class="fas fa-bed"></i></div>
        </div>
    </div>
    <div class="col-12 col-sm-6 col-lg-3">
        <div class="small-box bg-gradient-success mb-0">
            <div class="inner">
                <h3>@totalRentedRooms</h3>
                <p>Tổng phòng đã cho thuê</p>
            </div>
            <div class="icon"><i class="fas fa-door-open"></i></div>
        </div>
    </div>
    <div class="col-12 col-sm-6 col-lg-3">
        <div class="small-box bg-gradient-warning mb-0">
            <div class="inner">
                <h3 id="currentTime">@DateTime.Now.ToString("MM/yyyy")</h3>
                <p>Thời gian hiện tại</p>
            </div>
            <div class="icon"><i class="fas fa-calendar-alt"></i></div>
        </div>
    </div>
    <div class="col-12"><hr class="my-2"></div>
</div>

<!-- Card grid -->
<div class="row px-2 px-md-3 g-3" id="buildingsGrid">
    @foreach (var t in Model)
    {
        var rooms = t.PhongTros?.Count ?? 0;
        <div class="col-12 col-sm-6 col-lg-4 col-xl-3 building-item" data-name="@t.TenToaNha" data-address="@t.DiaChi" data-floors="@t.TongSoTang">
            <div class="card shadow-sm border-0 h-100 building-card">
                <div class="card-body p-3">
                    <div class="d-flex align-items-start justify-content-between mb-2">
                        <div class="flex-grow-1 me-2">
                            <h5 class="card-title mb-1 fw-bold text-dark">@t.TenToaNha</h5>
                            <div class="text-muted mb-2"><i class="fas fa-map-marker-alt me-1"></i><span class="fs-6">@t.DiaChi</span></div>
                        </div>
                        <div class="avatar bg-gradient-primary text-white rounded-circle d-flex align-items-center justify-content-center flex-shrink-0" style="width:40px;height:40px;">
                            <i class="fas fa-building fs-6"></i>
                        </div>
                    </div>
                    <div class="mb-2">
                        <div class="d-flex gap-2 mb-1">
                            <span class="badge bg-primary-subtle text-primary border border-primary fs-6 px-2 py-1">Tầng: <strong class="fs-6">@t.TongSoTang</strong></span>
                            <span class="badge bg-success-subtle text-success border border-success fs-6 px-2 py-1">Phòng: <strong class="fs-6">@rooms</strong></span>
                        </div>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(t.MoTa))
                    {
                        <p class="mt-2 text-secondary mb-0 fs-6 lh-base">@t.MoTa</p>
                    }
                </div>
                <div class="card-footer bg-transparent border-0 pt-0 pb-3 px-3">
                    <div class="d-flex gap-2">
                        <a asp-action="Edit" asp-route-id="@t.MaToaNha" class="btn btn-outline-primary btn-sm px-2 py-1"><i class="fas fa-edit me-1"></i>Sửa</a>
                        <a asp-action="Delete" asp-route-id="@t.MaToaNha" class="btn btn-outline-danger btn-sm px-2 py-1"><i class="fas fa-trash me-1"></i>Xóa</a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .small-box .icon{right:10px; top: 6px;}
    .bg-primary-subtle{ background: #e8f0ff; }
    .bg-success-subtle{ background: #e8f7ef; }
    .building-card{ 
        transition: transform .15s ease, box-shadow .15s ease; 
        margin-bottom: 0;
    }
    .building-card:hover{ 
        transform: translateY(-4px); 
        box-shadow: 0 8px 24px rgba(0,0,0,.08); 
    }
    .avatar{ 
        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%); 
    }
    /* Improved typography */
    .building-card .card-title {
        font-size: 1.25rem;
        line-height: 1.3;
        color: #2c3e50;
    }
    .building-card .badge {
        font-size: 0.875rem;
        font-weight: 500;
    }
    .building-card .btn {
        font-size: 0.875rem;
        font-weight: 500;
    }
    /* Better spacing between elements */
    .building-card .card-body > * + * {
        margin-top: 1rem;
    }
    
    /* Ensure consistent spacing between cards */
    .building-item {
        margin-bottom: 1rem;
    }
    
    /* Remove bottom margin from last row */
    .building-item:nth-last-child(-n+4) {
        margin-bottom: 0;
    }
    
    /* Card background colors - 4 different light colors */
    .building-item:nth-child(4n+1) .building-card {
        background-color: #e3ffff; /*Morning Glory */
    }

    .building-item:nth-child(4n+2) .building-card {
        background-color: #fff9f0; /* Light orange */
    }
    
    .building-item:nth-child(4n+3) .building-card {
        background-color: #f0fff4; /* Light green */
    }
    
    .building-item:nth-child(4n+4) .building-card {
        background-color: #fff0f5; /* Light pink */
    }
    
    /* Ensure text and buttons remain readable */
    .building-card .card-title,
    .building-card .text-muted,
    .building-card .text-secondary {
        color: #2c3e50 !important;
    }
    
    .building-card .badge {
        background-color: rgba(255, 255, 255, 0.8) !important;
        backdrop-filter: blur(10px);
    }
    
    /* Ensure building name and address are on separate lines */
    .building-card .card-title {
        display: block;
        width: 100%;
        margin-bottom: 0.5rem;
    }
    
    .building-card .text-muted {
        display: block;
        width: 100%;
        margin-top: 0;
        line-height: 1.4;
    }
    
    /* Increase spacing between header elements */
    .content-header .d-flex.gap-2 {
        gap: 1rem !important;
    }
    
    .content-header .input-group {
        margin-right: 1rem !important;
    }
    
    .content-header .form-select {
        margin-right: 1rem !important;
    }
</style>

@section Scripts {
    <script>
        (function(){
            const grid = document.getElementById('buildingsGrid');
            const searchBox = document.getElementById('searchBox');
            const sortSelect = document.getElementById('sortSelect');
            const currentTimeElement = document.getElementById('currentTime');

            function filter() {
                const q = (searchBox?.value || '').trim().toLowerCase();
                const items = grid.querySelectorAll('.building-item');
                items.forEach(el => {
                    const name = (el.dataset.name || '').toLowerCase();
                    const addr = (el.dataset.address || '').toLowerCase();
                    el.style.display = (!q || name.includes(q) || addr.includes(q)) ? '' : 'none';
                });
            }

            function sort() {
                const items = Array.from(grid.querySelectorAll('.building-item'));
                const type = sortSelect.value;
                items.sort((a,b)=>{
                    if(type==='floors'){
                        return (parseInt(b.dataset.floors||'0') - parseInt(a.dataset.floors||'0'));
                    }
                    // default name asc
                    return (a.dataset.name||'').localeCompare(b.dataset.name||'');
                });
                items.forEach(i=>grid.appendChild(i));
            }

            // Function to update current time
            function updateCurrentTime() {
                if (currentTimeElement) {
                    const now = new Date();
                    const day = String(now.getDate()).padStart(2, '0');
                    const month = String(now.getMonth() + 1).padStart(2, '0');
                    const year = now.getFullYear();
                    const hour = String(now.getHours()).padStart(2, '0');
                    const minute = String(now.getMinutes()).padStart(2, '0');
                    currentTimeElement.textContent = `${day}/${month}/${year} ${hour}:${minute}`;
                }
            }
            
            // Update time every second
            setInterval(updateCurrentTime, 1000);
            
            searchBox?.addEventListener('input', filter);
            sortSelect?.addEventListener('change', sort);
            sort();
        })();
        
        // Password confirmation modal handling
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, setting up modal...');
            
            const confirmPasswordBtn = document.getElementById('confirmPasswordBtn');
            const passwordInput = document.getElementById('confirmPassword');
            const passwordError = document.getElementById('passwordError');
            const modal = document.getElementById('passwordConfirmModal');
            
            console.log('Modal elements:', { confirmPasswordBtn, passwordInput, passwordError, modal });
            
            if (!confirmPasswordBtn || !passwordInput || !passwordError || !modal) {
                console.error('Some modal elements are missing!');
                return;
            }
            
            confirmPasswordBtn.addEventListener('click', function() {
                console.log('Confirm button clicked');
                const password = passwordInput.value.trim();
                
                if (!password) {
                    passwordInput.classList.add('is-invalid');
                    passwordError.textContent = 'Vui lòng nhập mật khẩu.';
                    return;
                }
                
                // Show loading state
                confirmPasswordBtn.disabled = true;
                confirmPasswordBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang xác thực...';
                
                // Send password to server for verification
                fetch('/ChuTroArea/ToaNha/VerifyPassword', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ password: password })
                })
                .then(response => {
                    console.log('Response received:', response);
                    return response.json();
                })
                .then(data => {
                    console.log('Data received:', data);
                    if (data.success) {
                        // Password is correct, redirect to create page
                        window.location.href = '/ChuTroArea/ToaNha/Create';
                    } else {
                        // Password is incorrect
                        passwordInput.classList.add('is-invalid');
                        passwordError.textContent = data.message || 'Mật khẩu không đúng. Vui lòng thử lại.';
                        confirmPasswordBtn.disabled = false;
                        confirmPasswordBtn.innerHTML = '<i class="fas fa-check me-2"></i>Xác nhận';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    passwordInput.classList.add('is-invalid');
                    passwordError.textContent = 'Đã xảy ra lỗi. Vui lòng thử lại.';
                    confirmPasswordBtn.disabled = false;
                    confirmPasswordBtn.innerHTML = '<i class="fas fa-check me-2"></i>Xác nhận';
                });
            });
            
            // Reset form when modal is closed (Bootstrap 4)
            $('#passwordConfirmModal').on('hidden.bs.modal', function() {
                console.log('Modal hidden, resetting form');
                passwordInput.value = '';
                passwordInput.classList.remove('is-invalid');
                confirmPasswordBtn.disabled = false;
                confirmPasswordBtn.innerHTML = '<i class="fas fa-check me-2"></i>Xác nhận';
            });
            
            // Handle Enter key in password input
            passwordInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    confirmPasswordBtn.click();
                }
            });
            
            console.log('Modal setup complete');
        });
    </script>
}

<!-- Password Confirmation Modal -->
<div class="modal fade" id="passwordConfirmModal" tabindex="-1" aria-labelledby="passwordConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="passwordConfirmModalLabel">
                    <i class="fas fa-shield-alt text-warning me-2"></i>
                    Xác nhận quyền truy cập
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    Để tạo tòa nhà mới, vui lòng nhập mật khẩu đăng nhập của bạn để xác thực.
                </div>
                <form id="passwordConfirmForm">
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">
                            <i class="fas fa-lock me-2"></i>Mật khẩu
                        </label>
                        <input type="password" class="form-control" id="confirmPassword" 
                               placeholder="Nhập mật khẩu của bạn" required>
                        <div class="invalid-feedback" id="passwordError">
                            Mật khẩu không đúng. Vui lòng thử lại.
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Hủy
                </button>
                <button type="button" class="btn btn-primary" id="confirmPasswordBtn">
                    <i class="fas fa-check me-2"></i>Xác nhận
                </button>
            </div>
        </div>
    </div>
</div>

